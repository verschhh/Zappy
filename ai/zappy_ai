#!/usr/bin/env python3

##
## EPITECH PROJECT, 2023
## Zappy
## File description:
## main
##

import sys
from time import sleep

from ai.classes.game import Game
from ai.classes.player import Player
from ai.classes.socket import Socket

def check_args(av, ac):
    nb_param = 0

    for i in range(ac):
        if av[i] == "-p" or av[i] == "-n" :
            nb_param += 1
        if av[i] == "-p" and (av[i + 1].isdigit() == False or int(av[i + 1]) < 0):
            print("Error: port must be a positive number")
            return 84
        if av[i] == "-n" and av[i + 1].isalpha() == False:
            print("Error: name must be a string")
            return 84
        if av[i] == "-h" and av[i + 1].isalpha() == False:
            print("Error: machine must be a string")
            return 84

    if nb_param != 2:
        print("Error: parameters -p and -n are required")
        return 84
    return 0


def set_args(av, ac):
    port = 0
    name = ""
    machine = ""

    for i in range(ac):
        if av[i] == "-p":
            port = int(av[i + 1])
        if av[i] == "-n":
            name = av[i + 1]
        if av[i] == "-h":
            machine = av[i + 1]
    if machine == "":
        machine = "localhost"
    return port, name, machine

def print_usage():
    print("USAGE: ./zappy_ai -help || -p [port] -n [name] -h [machine]")
    print("\t[port]\tis the port number")
    print("\t[name]\tis the name of the team")
    print("\t[machine]\tis the name of the machine; localhost by default")

def main(av, ac):
    if ac == 2 and av[1] == "-help":
        print_usage()
        return 0
    elif ac == 7 or ac == 5:
        if check_args(av, ac) == 84:
            return 84
        port, team_name, host = set_args(av, ac)
        sock = Socket(port, team_name, host)
        sock.connect()
        sock.receive()
        print(sock.buffer)
        sock.send(team_name)
        sock.receive()

        buff = sock.buffer.split("\n")
        print(f"client number: {buff[0]}")
        print(f"  map size:\nx:{buff[1].split()[0]}\ty:{buff[1].split()[1]}\n")
        game = Game(int(buff[1].split()[0]), int(buff[1].split()[1]))
        player = Player(sock, game)
        game.set_map()
        game.update_map(player.look())
        print_map(game)
        message = input("-> ")
        while message != "quit":
            if message == "Look":
                game.update_map(player.look())
                print_map(game)
            elif message == "Forward":
                player.forward()
            elif message == "Right":
                player.right()
            elif message == "Left":
                player.left()
            elif message == "Inventory":
                player.inventory()
            
            elif message.split(" ")[0] == "Take":
                print(message.split(" ")[1])
                player.take(message.split(" ")[1])
            elif message == "Broadcast salut":
                player.broadcast("salut")
            elif message == "Incantation":
                player.incantation()
            else:
                print("Unknown command")
            print(sock.buffer)
            message = input("-> ")
        sock.close()

    else:
        print_usage()
        return 84

def print_map(game):
    for i in game.map:
        for z in i:
            print(z["food"],end="\t")
        print("\n")

if __name__ == "__main__":
    if main(sys.argv, len(sys.argv)) == 84:
        sys.exit(84)