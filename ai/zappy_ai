#!/usr/bin/env python3.10

##
## EPITECH PROJECT, 2023
## Zappy
## File description:
## main
##

import sys
from time import sleep

from ai.classes.game import Game
from ai.classes.player import Player
from ai.classes.socket import Socket
from ai.classes.ai import AI

def check_args(av, ac):
    nb_param = 0

    for i in range(ac):
        if av[i] == "-p" or av[i] == "-n" :
            nb_param += 1
        if av[i] == "-p" and (av[i + 1].isdigit() == False or int(av[i + 1]) < 0):
            print("Error: port must be a positive number")
            return 84
        if av[i] == "-n" and av[i + 1].isalpha() == False:
            print("Error: name must be a string")
            return 84
        if av[i] == "-h" and av[i + 1].isalpha() == False:
            print("Error: machine must be a string")
            return 84

    if nb_param != 2:
        print("Error: parameters -p and -n are required")
        return 84
    return 0


def set_args(av, ac):
    port = 0
    name = ""
    machine = ""
    debug = False

    for i in range(ac):
        if av[i] == "-p":
            port = int(av[i + 1])
        if av[i] == "-n":
            name = av[i + 1]
        if av[i] == "-h":
            machine = av[i + 1]
        if av[i] == "-d":
            debug = True

    if machine == "":
        machine = "localhost"
    return port, name, machine, debug

def print_usage():
    print("USAGE: ./zappy_ai -help || -p [port] -n [name] -h [machine]")
    print("\t[port]\tis the port number")
    print("\t[name]\tis the name of the team")
    print("\t[machine]\tis the name of the machine; localhost by default")

def launch_game(av, ac):
    port, team_name, host, debug = set_args(av, ac)
    sock = Socket(port, team_name, host)
    sock.connect()
    sock.buffer = sock._sock.recv(4096).decode()
    print(sock.buffer)
    print("Sending team name")
    print(team_name)
    sock.send(team_name)
    print(sock.buffer)
    sock.buffer = sock._sock.recv(4096).decode()
    print(sock.buffer)
    buff = sock.buffer.split("\n")
    ai = AI(sock, int(buff[1].split()[0]), int(buff[1].split()[1]))
    ai.set_map()
    message = ""
    while ai.level < 8:
        if debug == False:
            ai.pick_move()
        else:
            if message == "Look":
                ai.update_map(ai.look())
                # print_map(ai)
            elif message == "Forward":
                ai.forward()
            elif message == "Right":
                ai.right()
            elif message == "Left":
                ai.left()
            elif message == "Inventory":
                ai.update_inventory()
            elif message == "Connect_nbr":
                print(ai.connect_nbr())
            elif message == "Fork":
                print(ai.fork())
            elif message.split(" ")[0] == "Take":
                print(f" test:{message.split(' ')[1]}")
                ai.take(message.split(' ')[1])
            elif message.split(" ")[0] == "Set":
                print(message.split(' ')[1])
                ai.set(message.split(' ')[1])
            elif message == "Broadcast":
                ai.broadcast(ai.send_inventory())
            elif message == "Incantation":
                ai.incantation()
            else:
                print("Unknown command")
            print(ai.socket.buffer)
            print(ai.inv_other_player)
            message = input("-> ")
    sock.close()

def main(av, ac):
    if ac == 2 and av[1] == "-help":
        print_usage()
        return 0
    elif check_args(av, ac) == 0:
        launch_game(av, ac)
    else:
        print_usage()
        return 0

def print_map(ai):
    for i in ai.map:
        for z in i:
                print(z["food"],end="\t")
        print("\n")
    # print(f"Position: X {x} Y {y}")

if __name__ == "__main__":
    if main(sys.argv, len(sys.argv)) == 84:
        sys.exit(84)